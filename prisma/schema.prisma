// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_DIRECT_URL_POSTGRES")
  // directUrl = env("DATABASE_DIRECT_URL_POSTGRES")
}

model Profile {
  // Doc: When new attributes are added, make sure to update the triggers
  // /prisma/seed.ts > main() > onNewUser
  id     String @id @db.Uuid
  name   String
  mobile String
  email  String

  // Doc: Needed in on_profile_role_updated trigger
  role          UserRole      @default(user)
  // Doc: Needed in on_profile_isnew_updated trigger
  isNew         Boolean   @default(true) @map("isnew")
  isBlacklisted Boolean  @default(false) @map("is_blacklisted")
  cart          Cart?
  cartId        String?
  bookings      Booking[]

  type              ProfileType        @default(STUDENT)
  typeData          Json?              @default("{}") @map("type_data") @db.Json
  // Doc: This will have the data for each type
  // student: { yearOfStudy: 1, branch: "CSE", department: "Computer Science", studentId: "1234", clubs: ["club1", "club2"], researchArea: "AI"}
  // faculty: { department: "CSE", branch: "Computer Science", designation: "Assistant Professor", facultyId: "1234"}
  // staff: { department: "CSE", branch: "Computer Science", designation: "Lab Assistant", staffId: "1234"}
  RevalidateProfile RevalidateProfile?
  events   Event[]

  @@map("profile")
}

model RevalidateProfile {
  id     String  @id @default(nanoid(7))
  userId String  @unique @db.Uuid
  user   Profile @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Equipment {
  id              String           @id @unique @default(nanoid(7))
  name            String
  model           String
  description     String           @db.VarChar(2500)
  image           String
  instances       EInstance[]
  eCategoriesId   String
  category        ECategories      @relation(fields: [eCategoriesId], references: [id], onDelete: Cascade)
  // isDeleted       Boolean           @default(false) @map("is_deleted")
  manuals         Manual[]
  videos          Video[]
  secondaryStatus ESecondaryStatus @default(ACTIVE) @map("secondary_status")
}

model Manual {
  id          String    @id @unique @default(nanoid(7))
  name        String
  pdf         String
  equipmentId String
  equipment   Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Video {
  id          String    @id @unique @default(nanoid(7))
  video       String
  equipmentId String
  equipment   Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model EInstance {
  id              String           @id @unique @default(nanoid(7))
  name            String
  description     String           @db.VarChar(2500)
  status          EStatus?         @default(available)
  cost            Float
  billingType     EBillingType     @default(PER_SLOT) @map("billing_type")
  equipmentId     String
  CartItem        CartItem[]
  BookingItem     BookingItem[]
  availability    Json             @default("{}") @db.Json
  equipment       Equipment        @relation(fields: [equipmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  secondaryStatus ESecondaryStatus @default(ACTIVE) @map("secondary_status")
}

model Cart {
  id     String     @id @unique @default(nanoid(7))
  userId String     @unique @map("user_id") @db.Uuid
  items  CartItem[]

  user Profile @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model CartItem {
  id         String   @id @unique @default(nanoid(12))
  instanceId String
  start      DateTime
  end        DateTime
  cartId     String
  createdAt  DateTime @default(now()) @map("created_at")

  cart     Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  instance EInstance @relation(fields: [instanceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Booking {
  id            String        @id @unique @default(nanoid(7))
  userId        String        @db.Uuid
  mentor        String
  description   String
  deadline      DateTime
  cost          Float
  items         BookingItem[]
  paymentId     String?
  status        BookingStatus @default(PENDING)
  createdAt     DateTime      @default(now()) @map("created_at")
  adminNotes    String?       @map("admin_notes") @db.VarChar(255)
  user          Profile       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  paymentStatus PaymentStatus @default(PENDING) @map("payment_status")
}

model BookingItem {
  id         String    @id @unique @default(nanoid(12))
  instanceId String
  start      DateTime
  end        DateTime
  bookingId  String
  booking    Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  instance   EInstance @relation(fields: [instanceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ECategories {
  id   String @id @unique @default(nanoid(7))
  name String

  equipment Equipment[]
}

model RepoElectronics {
  id          String  @id @unique @default(nanoid(7))
  name        String
  model       String
  loanedQty   Int
  image       String
  description String? @db.VarChar(255)
}

model RepoMaterials {
  id         String @id @unique @default(nanoid(7))
  name       String
  quantity   Int
  dimensions Json   @db.Json
  // { type: DType, value: number, unit: DUnit }[]

  description String? @db.VarChar(255)
}

model ContentManagement {
  id        String   @id @unique @default(nanoid(7))
  name      String
  pathname  String   @unique
  data      Json
  updatedAt DateTime @default(now()) @map("updated_at")
}

// Enums
enum EStatus {
  available
  inUse       @map("in_use")
  maintenance
  broken
}

enum BookingStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum UserRole {
  admin
  user
}

enum ProfileType {
  STUDENT
  FACULTY
  STAFF
}

enum ESecondaryStatus {
  ACTIVE
  DELETED
  DISABLED
}

enum PaymentStatus {
  PENDING
  VERIFICATION
  SUCCESS
  FAILED
}

enum EBillingType {
  PER_SLOT
  PER_SESSION
}

model Event {
  id          String      @id @unique @default(nanoid(7))
  title       String
  previewDesc String
  desc        String
  image       String
  startTime   DateTime    @map("start_time")
  endTime     DateTime    @map("end_time")
  venue       String
  venueLink   String?     @map("venue_link")
  status      EventStatus @default(UPCOMING)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @default(now()) @map("updated_at")

  userId String  @db.Uuid
  user   Profile @relation(fields: [userId], references: [id])
}

enum EventStatus {
  UPCOMING
  ONGOING
  COMPLETED
}
