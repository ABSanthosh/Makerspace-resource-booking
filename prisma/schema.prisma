// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_DIRECT_URL_POSTGRES")
  // directUrl = env("DATABASE_DIRECT_URL_POSTGRES")
}

model Profile {
  // When new attributes are added, make sure to update the triggers
  // /prisma/seed.ts > main() > onNewUser
  id         String @id @db.Uuid
  name       String
  mobile     String
  email      String
  department String
  branch     String
  userId     String @map("userid") // This is for emp id or student id
  year       Int?
  clubs      Json?  @db.Json

  // Needed in on_profile_role_updated trigger
  role     Role      @default(user)
  // Needed in on_profile_isnew_updated trigger
  isNew    Boolean   @default(true) @map("isnew")
  cart     Cart?
  cartId   String?
  bookings Booking[]

  @@map("profile")
}

model Equipment {
  id            String      @id @unique @default(nanoid(7))
  name          String
  model         String
  description   String      @db.VarChar(2500)
  image         String
  instances     EInstance[]
  eCategoriesId String
  category      ECategories @relation(fields: [eCategoriesId], references: [id], onDelete: Cascade)
  isDeleted     Boolean     @default(false) @map("is_deleted")
  // videos
}

model EInstance {
  id          String     @id @unique @default(nanoid(7))
  name        String
  description String     @db.VarChar(2500)
  status      EStatus?   @default(available)
  cost        String
  equipmentId String
  // manuals
  // TODO: new model to hold availability of each instance
  // TODO: custom time for each instance
  equipment   Equipment  @relation(fields: [equipmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  CartItem    CartItem[]

  isDeleted Boolean @default(false) @map("is_deleted")
}

model Cart {
  id        String        @id @unique @default(nanoid(7))
  userId    String        @unique @db.Uuid
  items     CartItem[]
  status    BookingStatus @default(pending)
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @default(now()) @map("updated_at")

  user Profile @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model CartItem {
  id          String    @id @unique @default(nanoid(12))
  equipmentId String
  instanceId  String
  start       DateTime
  end         DateTime
  cartId      String
  cart        Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  instance    EInstance @relation(fields: [instanceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ECategories {
  id   String @id @unique @default(nanoid(7))
  name String

  equipment Equipment[]
}

model RepoElectronics {
  id          String  @id @unique @default(nanoid(7))
  name        String
  model       String
  loanedQty   Int
  image       String
  description String? @db.VarChar(255)
}

model RepoMaterials {
  id         String @id @unique @default(nanoid(7))
  name       String
  quantity   Int
  dimensions Json   @db.Json
  // { type: DType, value: number, unit: DUnit }[]

  description String? @db.VarChar(255)
}

// Enums
enum EStatus {
  available
  inUse       @map("in_use")
  maintenance
  broken
}

enum BookingStatus {
  // TODO: While it is in pending, block the slot.
  pending
  approved
  rejected
}

enum Role {
  admin
  user
}

// Booking info
// mentor - text
// description - text (course, our, research, etc)
// deadline for the project
// status - pending, approved, rejected
// payment qr code for the materials

// Default time for all instances

model Booking {
  id          String        @id @unique @default(nanoid(7))
  userId      String        @db.Uuid
  mentor      String
  description String
  deadline    DateTime
  status      BookingStatus @default(pending)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @default(now()) @map("updated_at")

  user Profile @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ContentManagement {
  id        String   @id @unique @default(nanoid(7))
  path      String   @unique
  data      Json
  updatedAt DateTime @default(now()) @map("updated_at")
}
